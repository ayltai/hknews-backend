buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'org.jacoco:org.jacoco.core:0.8.3'
        classpath 'org.owasp:dependency-check-gradle:4.0.2'
    }
}

plugins {
    id 'org.springframework.boot'        version '2.1.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.7.RELEASE'
    id 'java'
    id 'checkstyle'
    id 'com.github.spotbugs'             version '1.7.1'
    id 'jacoco'
    id 'org.owasp.dependencycheck'       version '4.0.2'
    id 'name.remal.check-updates'        version '1.0.121'
}

String VERSION_REVISION = 'git rev-list --count HEAD'.execute().text.trim()
String VERSION_HASH     = 'git rev-parse --short HEAD'.execute().text.trim()

group   'com.github.ayltai'
version '1.0.' + VERSION_REVISION + '-' + VERSION_HASH

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    codacy

    compileOnly {
        extendsFrom annotationProcessor
    }
}

//region Dependencies

ext {
    springVersion   = '2.1.4.RELEASE'
    okhttpVersion   = '3.14.0'
    retrofitVersion = '2.5.0'
    lombokVersion   = '1.18.6'
}

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://dl.bintray.com/mockito/maven' }
    maven { url 'https://dl.bintray.com/typesafe/maven-releases' }
}

dependencies {
    implementation ("org.springframework.boot:spring-boot-starter-web:$springVersion") {
        exclude group : 'org.springframework.boot', module : 'spring-boot-starter-tomcat'
    }
    implementation      "org.springframework.boot:spring-boot-starter-security:$springVersion"
    implementation      "org.springframework.boot:spring-boot-starter-undertow:$springVersion"
    implementation      "org.springframework.boot:spring-boot-starter-data-mongodb:$springVersion"
    implementation      "org.springframework.boot:spring-boot-starter-actuator:$springVersion"
    testImplementation  "org.springframework.boot:spring-boot-starter-test:$springVersion"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:$springVersion"

    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-simplexml:$retrofitVersion"

    implementation 'org.apache.commons:commons-lang3:3.8.1'
    implementation 'org.json:json:20180813'

    compileOnly         "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    codacy 'com.codacy:codacy-coverage-reporter:6.0.0'
}

//endregion

//region Checkstyle configurations

checkstyle {
    toolVersion    '8.18'
    configFile     rootProject.file('./checkstyle.xml')
    ignoreFailures true
    showViolations true
}

tasks.withType(Checkstyle) {
    source  'src/main/java'
    include '**/*.java'
    exclude '**/*Test.java'

    reports {
        xml.enabled      = true == System.getenv('CI')
        html.enabled     = true == !System.getenv('CI')
        xml.destination  file("$project.buildDir/reports/checkstyle/checkstyle-output.xml")
        html.destination file("$project.buildDir/reports/checkstyle/checkstyle-output.html")
    }
}

//endregion

//region SpotBugs configurations

spotbugs {
    toolVersion    '3.1.12'
    effort         'max'
    reportLevel    'medium'
    ignoreFailures true
    excludeFilter  rootProject.file('./spotbugs-exclude.xml')
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled  = true == System.getenv('CI')
        html.enabled = true == !System.getenv('CI')
    }
}

//endregion

//region JaCoCo configurations

jacoco {
    toolVersion '0.8.3'
}

jacocoTestReport {
    dependsOn 'test'

    reports {
        xml.enabled  = true
        html.enabled = true
    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

//endregion

//region OWASP dependency check configurations

check.dependsOn dependencyCheckAnalyze

dependencyCheck {
    suppressionFile = 'suppressions.xml'
}

//endregion

//region Codacy configurations

task uploadCoverageToCodacy(type : JavaExec, dependsOn : jacocoTestReport) {
    main      = 'com.codacy.CodacyCoverageReporter'
    classpath = configurations.codacy

    args = [
        'report',
        '-l',
        'Java',
        '-r',
        "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    ]
}

task (codacyDepsize) {
    doLast {
        def size = 0

        configurations.codacy.collect {
            it.length() / (1024 * 1024)
        }.each {
            size += it
        }

        println "Total dependencies size: ${Math.round(size * 100) / 100} MB"

        configurations.codacy.sort {
            -it.length()
        }.each {
            println "${it.name}: ${Math.round(it.length() / (1024) * 100) / 100} KB"
        }
    }
}

task (codacyLocs) {
    doLast {
        configurations.codacy.each {
            String jarName = it

            println jarName
        }
    }
}

//endregion
