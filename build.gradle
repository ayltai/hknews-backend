plugins {
    id 'org.springframework.boot'        version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'checkstyle'
    id 'com.github.spotbugs'             version '3.0.0'
    id 'org.sonarqube'                   version '2.8'
    id 'jacoco'
    id 'com.github.ben-manes.versions'   version '0.28.0'
}

group   = 'com.github.ayltai'
version = '1.2.2'

sourceCompatibility = 11
targetCompatibility = 11

configurations {
    codacy

    compileOnly {
        extendsFrom annotationProcessor
    }
}

//region Dependencies

ext {
    okhttpVersion        = '4.7.1'
    retrofitVersion      = '2.8.2'
    jacksonVersion       = '2.11.0'
    lombokVersion        = '1.18.12'
    embeddedMongoVersion = '2.2.0'
}

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://dl.bintray.com/mockito/maven' }
    maven { url 'https://dl.bintray.com/typesafe/maven-releases' }
}

dependencies {
    // Spring Boot
    implementation ('org.springframework.boot:spring-boot-starter-web') {
        exclude group : 'org.springframework.boot', module : 'spring-boot-starter-json'
        exclude group : 'org.springframework.boot', module : 'spring-boot-starter-tomcat'
        exclude group : 'org.hibernate.validator',  module : 'hibernate-validator'
    }
    implementation      'org.springframework.boot:spring-boot-starter-undertow'
    implementation      'org.springframework.boot:spring-boot-starter-data-mongodb'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // HTTP networking
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-simplexml:$retrofitVersion"

    // Utilities
    implementation 'org.apache.commons:commons-lang3:3.10'
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation 'org.json:json:20190722'

    // Monitoring
    implementation 'com.instrumentalapp:instrumental_agent:1.0.1'
    implementation 'io.logz.logback:logzio-logback-appender:1.0.24'

    // Code generation
    implementation      'org.aspectj:aspectjweaver:1.9.5'
    compileOnly         "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    // Unit testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo:$embeddedMongoVersion"

    codacy 'com.codacy:codacy-coverage-reporter:7.1.0'
}

//endregion

//region Checkstyle configurations

checkstyle {
    toolVersion    '8.31'
    configFile     rootProject.file('./checkstyle.xml')
    ignoreFailures true
    showViolations true
}

tasks.withType(Checkstyle) {
    source  'src/main/java'
    include '**/*.java'
    exclude '**/*Test.java'

    reports {
        xml.enabled      = true == System.getenv('CI')
        html.enabled     = true == !System.getenv('CI')
        xml.destination  file("$project.buildDir/reports/checkstyle/checkstyle-output.xml")
        html.destination file("$project.buildDir/reports/checkstyle/checkstyle-output.html")
    }
}

//endregion

//region SpotBugs configurations

spotbugs {
    toolVersion    '4.0.0'
    effort         'max'
    reportLevel    'medium'
    ignoreFailures true
    excludeFilter  rootProject.file('./spotbugs-exclude.xml')
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled  = true == System.getenv('CI')
        html.enabled = true == !System.getenv('CI')
    }
}

//endregion

//region JaCoCo configurations

jacoco {
    toolVersion '0.8.5'
}

jacocoTestReport {
    dependsOn 'test'

    reports {
        xml.enabled  = true
        html.enabled = true
    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes                 = [ 'jdk.internal.*' ]
}

//endregion

//region Codacy configurations

task uploadCoverageToCodacy(type : JavaExec, dependsOn : jacocoTestReport) {
    main      = 'com.codacy.CodacyCoverageReporter'
    classpath = configurations.codacy

    args = [
        'report',
        '-l',
        'Java',
        '-r',
        "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    ]
}

task (codacyDepsize) {
    doLast {
        def size = 0

        configurations.codacy.collect {
            it.length() / (1024 * 1024)
        }.each {
            size += it
        }

        println "Total dependencies size: ${Math.round(size * 100) / 100} MB"

        configurations.codacy.sort {
            -it.length()
        }.each {
            println "${it.name}: ${Math.round(it.length() / (1024) * 100) / 100} KB"
        }
    }
}

task (codacyLocs) {
    doLast {
        configurations.codacy.each {
            String jarName = it

            println jarName
        }
    }
}

//endregion
